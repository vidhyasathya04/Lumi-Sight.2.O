'use server';

/**
 * @fileOverview This file defines a Genkit flow for providing personalized health advice to users.
 *
 * The flow takes a user's query and their profile information as input, and uses an AI model to generate personalized health advice.
 * It incorporates eye screening results if available to provide more specific recommendations.
 *
 * - `getPersonalizedHealthAdvice` - The main function to call to get personalized health advice.
 * - `PersonalizedHealthAdviceInput` - The input type for the `getPersonalizedHealthAdvice` function.
 * - `PersonalizedHealthAdviceOutput` - The return type for the `getPersonalizedHealthAdvice` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizedHealthAdviceInputSchema = z.object({
  query: z.string().describe('The user\u2019s health-related question.'),
  profile: z.object({
    name: z.string().describe('The user\u2019s name.'),
    age: z.number().describe('The user\u2019s age.'),
    gender: z.string().describe('The user\u2019s gender.'),
    location: z.string().describe('The user\u2019s location.'),
    hasDiabetes: z.enum(['yes', 'no', 'unknown']).describe('Whether the user has diabetes.'),
    bloodGroup: z.string().describe('The user\u2019s blood group.'),
    lastEyeCheckup: z.string().describe('When the user had their last eye checkup.'),
    willingToDonateBlood: z.enum(['yes', 'no', 'maybe']).describe('Whether the user is willing to donate blood.'),
  }).describe('The user\u2019s health profile.'),
  eyeScreeningResults: z.string().optional().describe('The results of the user\u2019s eye screening, if available.'),
  language: z.string().describe('The user selected language'),
});
export type PersonalizedHealthAdviceInput = z.infer<typeof PersonalizedHealthAdviceInputSchema>;

const PersonalizedHealthAdviceOutputSchema = z.object({
  advice: z.string().describe('The personalized health advice generated by the AI.'),
});
export type PersonalizedHealthAdviceOutput = z.infer<typeof PersonalizedHealthAdviceOutputSchema>;

export async function getPersonalizedHealthAdvice(input: PersonalizedHealthAdviceInput): Promise<PersonalizedHealthAdviceOutput> {
  return personalizedHealthAdviceFlow(input);
}

const personalizedHealthAdvicePrompt = ai.definePrompt({
  name: 'personalizedHealthAdvicePrompt',
  input: {schema: PersonalizedHealthAdviceInputSchema},
  output: {schema: PersonalizedHealthAdviceOutputSchema},
  prompt: `You are a multi-language AI health assistant. You will answer the user's health-related question based on their profile and eye screening results, if available.\nYou will respond in the user's selected language: {{{language}}}.\n
Here is the user's profile:
Name: {{{profile.name}}}
Age: {{{profile.age}}}
Gender: {{{profile.gender}}}
Location: {{{profile.location}}}
Has Diabetes: {{{profile.hasDiabetes}}}
Blood Group: {{{profile.bloodGroup}}}
Last Eye Checkup: {{{profile.lastEyeCheckup}}}
Willing to Donate Blood: {{{profile.willingToDonateBlood}}}

{{#if eyeScreeningResults}}
Here are the user's eye screening results:
{{{eyeScreeningResults}}}
{{/if}}

User's Question: {{{query}}}

Provide personalized health advice to the user.`,
});

const personalizedHealthAdviceFlow = ai.defineFlow(
  {
    name: 'personalizedHealthAdviceFlow',
    inputSchema: PersonalizedHealthAdviceInputSchema,
    outputSchema: PersonalizedHealthAdviceOutputSchema,
  },
  async input => {
    const {output} = await personalizedHealthAdvicePrompt(input);
    return output!;
  }
);
